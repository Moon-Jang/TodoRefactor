[ Entity ]
- 일단 entity가 지녀야 할 것
    (@). db에 들어가야 하는 필드
    (@). setter 척살
    (@). createdAt, modifiedAt, deletedAt 을 추상 메소드로 상속받기 !!!!
    (4). (method) validation
    (5). (method) 내부 서비스 로직 !!
        ㄴ> 여기서 말하는 내부 서비스 로직: 엔티티에 직접적으로 영향을 끼치는 메소드들을 entity에서 정의함 !!
    (6). 정적 팩토리 메소드 컨벤션 @

[ Entity - (3) ]: 시간 관련 추상 클래스 ??? 그냥 하면 ...글럿나?
@MappedSuperclass)
- 엔티티 클래스 간에 속성을 공유하기 위해 사용되는 어노테이션
- 테이블로 매핑되지 않는 베이스 클래스를 생성하여 공통 속성을 정의하고, 이를 여러 엔티티 클래스에서 상속받아 사용하고 싶을때
- 상위 클래스에 적용시, 해당 클래스는 테이블로 매핑되지 않지만 하위 엔티티 클래스에서 속성을 상속 가능
- 어노테이션이 적용된 클래스는 테이블로 매핑되지 않지만, 엔티티 클래스의 일부로 취급 => 하위 엔티티에서 해당 속성 사용 가능!!

@EntityListeners(AuditingEntityListener.class)
- JPA Entity에서 변경 이벤트를 수신하기 위해 사용되는 어노테이션
- JPA 제공 자동 감시 기능, 생성 및 수정 시간을 자동으로 설정
- 해당 엔티티의 생성 시간(created_at)과 수정 시간(modified_at)을 관리하는 기능을 활성화
- @CreatedDate 어노테이션을 생성 시간 필드, @LastModifiedDate 어노테이션을 수정 시간 필드 -> 각각 엔티티가 생성되거나 수정될 때 해당 필드에 자동으로 값을 설정


[ 정적 팩토리 메소드 컨벤션 ]
1) from: 매개변수 하나 받아서 해당 타입의 인스턴스를 반환하는 형변환 메소드
2) of: 여러 매개변수를 받아 적합한 타입의 인스턴스를 반환하는 집계 메소드
3) valueOf: from과 of의 더 자세한 버전 (어떻게 자세해 지는데 ?? 직접적인 리터럴을 받는 게 기준임? 변수가 아니라?)
4) instance / getInstance: (매개변수를 받는다면) 매개변수로 명시한 인스턴스를 반환하지만, 같은 인스턴스임을 보장X
5) create / newInstance: instance/getInstance와 같지만, 매변 새로운 인스턴스를 생성해 반환함을 보장
6) getType
7) newType
8) type


[ @RequiredArgsConstructor ]
의존성 주입을 간편하게 처리하기 위해 사용 -> 주입받아야 하는 의존성을 가진 필드들을 파라미터로 받을 수 있게 자동 생성자 생성
response, entity << 본인들이 의존성으로 끌려가서 사용됨, 의존성을 주입받는 애들이 아니기에 사용할 필요가 없음
ㄴ> 멘토님이 의아해 했던 부분이 여기임 ... entity,,, 대체 왜 ? ^-^....
controlelr, service << 의존성을 어디에서 끌어와서 보통 사용함, 의존성을 주입받을 필요가 잇음! 사용!

부분적 변경, patch / 전체 변경 put

Q.
아니 vo...이건 머 어케해야함? ? ? ? ?
[] 구글링 찾아보기

